name: "Fetch quotes via yfinance"
# TODO think about a solution to have symbols and metadata in the "schema" branch

on:
  workflow_call:
    inputs:
      branch:
        description: 'the name of the feature branch'
        required: true
        type: string
      where:
        description: 'a where constraint provided to the sql query of symbols'
        required: true
        type: string
      time:
        description: 'maximum runtime in minutes'
        required: true
        type: string
      commit_message:
        description: 'message for the merge commit'
        required: true
        type: string

env:
  REPO: adagrad
  DATABASE: findb
  DOLTHUB_SECRET_JWT: ${{ secrets.DOLTHUB_SECRET_JWT }}
  DOLTHUB_SECRET: ${{ secrets.DOLTHUB_SECRET }}

jobs:
  fetch_quotes:
    runs-on: ubuntu-latest
    name: A job to look for new symbols
    steps:

      - name: lookup new symbols
        id: fetch_quotes
        uses: adagrad/findb_dolthub@latest
        with:
          # TODO later we want to have symbols and metadata in the "schema" branch where we can do this lightweight action
          #args: "dolt sqlserver -d ${{ env.REPO }}/${{ env.DATABASE }} -b main -f ${{ inputs.branch }} --force-clone --and-exec \"fin-get yfinance quote -d 'mysql+pymysql://root:@localhost/findb' -w \\\"${{ inputs.where }}\\\" --time ${{ inputs.time }} --dolt-load\""
          args: "dolt sqlserver -d ${{ env.REPO }}/${{ env.DATABASE }} -b schema -f ${{ inputs.branch }} --force-init --and-exec \"fin-get yfinance quote -d 'mysql+pymysql://root:@localhost/findb' -w \\\"${{ inputs.where }}\\\" --time ${{ inputs.time }} --dolt-load\""

      - name: push new symbols
        id: push_symbols
        uses: adagrad/findb_dolthub@latest
        with:
          args: "dolt push -a -m '${{ inputs.commit_message }}'"

  simulate_pr_merge:
    needs: fetch_quotes
    runs-on: ubuntu-latest
    name: Merge branch into main
    steps:
      - name: merge into main
        uses: adagrad/findb_dolthub@latest
        with:
          args: "dolt merge -d ${{ env.REPO }}/${{ env.DATABASE }} -s ${{ inputs.branch }} -t main -m '${{ inputs.commit_message }}' --theirs -p --delete-source"
